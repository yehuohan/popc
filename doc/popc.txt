*popc.txt* A layer based context manager for buffers, bookmarks and worksapces.
*popc*


                        _/_/_/
                       _/    _/    _/_/    _/_/_/       _/_/
                      _/_/_/    _/    _/  _/    _/   _/    _/
                     _/        _/    _/  _/    _/   _/
                    _/          _/_/    _/_/_/       _/_/_/
                                       _/
                                      _/


================================================================================
Table of Contents                                                     *popc-toc*

1. Overview                                                      |popc-overview|
2. Usage                                                            |popc-usage|
 2.1 Installation                                            |popc-installation|
 2.2 Configuration                                          |popc-configuration|
 2.3 Statusline                                                |popc-statusline|
 2.4 Tabline                                                      |popc-tabline|
 2.5 Highlight                                                  |popc-highlight|
3. Layer                                                            |popc-layer|
 3.1 Buffer layer                                                  |popc-buffer|
 3.2 Bookmark layer                                              |popc-bookmark|
 3.3 Workspace layer                                            |popc-workspace|
 3.4 Common mapping for layer                                      |popc-common|
4. Add customized layer                                         |popc-add-layer|
5. License                                                        |popc-license|


================================================================================
1. Overview                                                      *popc-overview*

Popc is a layer based context manager, including layer for buffers, bookmarks
and worksapces.....

                                                                      |popc-toc|

================================================================================
2. Usage                                                            *popc-usage*

--------------------------------------------------------------------------------
 2.1 Installation                                            *popc-installation*

Example for vim-plug:
>
    Plug 'yehuohan/popc'
<
You should meet the requirements below:
>
    vim8.0+ or neovim
    enable hidden option
<

                                                                      |popc-toc|

--------------------------------------------------------------------------------
 2.2 Configuration                                          *popc-configuration*

There are some options start with `g:Popc_` (like `g:Popc_jsonPath`) used to
config popc. The default is listed below:
>
    let s:conf = {
        \ 'jsonPath'        : $HOME, " where to store popc's json configuration
        \ 'useFloatingWin'  : 0,
        \ 'useNerdSymbols'  : 1,
        \ 'symbols'         : {},
        \ 'highlight'       : {
            \ 'text'        : 'Pmenu',
            \ 'selected'    : 'PmenuSel',
            \ 'lineTxt'     : 'Pmenu',
            \ 'lineSel'     : 'PmenuSel',
            \ 'modifiedTxt' : '',
            \ 'modifiedSel' : 'DiffAdd',
            \ 'labelTxt'    : 'IncSearch',
            \ 'blankTxt'    : 'Normal',
            \ },
        \ 'maxHeight'       : 0,
        \ 'useTabline'      : 1,
        \ 'useStatusline'   : 1,
        \ 'statusLine'      : 'popc#stl#StatusLine()',
        \ 'tabLine'         : 'popc#stl#TabLine()',
        \ 'tabLineLayout'   : {'left' : 'buffer', 'right': 'tab'},
        \ 'useLayer'        : {'Buffer': 1, 'Bookmark': 1, 'Workspace': 1},
        \ 'bufShowUnlisted' : 1,
        \ 'bufIgnoredType'  : ['Popc', 'qf'],
        \ 'wksRootPatterns' : ['.popc', '.git', '.svn', '.hg'],
        \ 'wksSaveUnderRoot': 0, " Store workspace under current root or global `jsonPath`
        \ 'operationMaps'   : {
            \ 'moveCursorDown'   : ['j', 'C-j'],
            \ 'moveCursorUp'     : ['k', 'C-k'],
            \ 'moveCursorBottom' : ['J'],
            \ 'moveCursorTop'    : ['K'],
            \ 'moveCursorPgDown' : ['M-j'],
            \ 'moveCursorPgUp'   : ['M-k'],
            \ 'help'             : ['?'],
            \ 'back'             : ['q'],
            \ 'quit'             : ['Esc']
            \ },
        \ 'enableLog' : 0
        \ }
<
default symbols:
>
    let s:defaultSymbols = {
        \ 'unicode' : {
            \ 'Popc'   : '󰯙',
            \ 'Buf'    : '',
            \ 'Wks'    : '',
            \ 'Bms'    : '',
            \ 'CTab'   : '󰧟',
            \ 'DTab'   : '',
            \ 'Tab'    : '',
            \ 'CWin'   : '▪',
            \ 'Win'    : '▫',
            \ 'Rank'   : '≡',
            \ 'Arr'    : '󰜴',
            \ 'Dots'   : '…',
            \ 'Ptr'    : '',
            \ 'Sep'    : ['', ''],
            \ 'SubSep' : ['', ''],
            \ 'Nums'   : ['⁰', '¹', '²', '³', '⁴', '⁵', '⁶', '⁷', '⁸', '⁹']
            \ },
        \ 'ascii' : {
            \ 'Popc'   : '#',
            \ 'Buf'    : '@',
            \ 'Wks'    : '&',
            \ 'Bms'    : '$',
            \ 'Tab'    : '~',
            \ 'CTab'   : '%',
            \ 'DTab'   : '.',
            \ 'CWin'   : '*',
            \ 'Win'    : '-',
            \ 'Rank'   : '=',
            \ 'Arr'    : '->',
            \ 'Dots'   : '...',
            \ 'Ptr'    : '>',
            \ 'Sep'    : ['', ''],
            \ 'SubSep' : ['\', '/'],
            \ 'Nums'   : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            \ },
        \ }
<

                                                                      |popc-toc|

--------------------------------------------------------------------------------
 2.3 Statusline                                                *popc-statusline*

Set your own statusline with `g:Popc_statusLine` and `g:Popc_useStatusline`.
`popc#stl#StatusLineGetSegments()` can get the content for statusline.

An example with airline:
>
    function! StatusLine()
        let [l:left, l:center, l:right] = popc#stl#StatusLineGetSegments('a')
        let b = airline#builder#new({ 'active': 1 })
        call b.add_section('airline_a', l:left)
        call b.add_section('airline_b', '')
        call b.add_section('airline_c', l:center)
        call b.split()
        call b.add_section('airline_y', '')
        call b.add_section('airline_z', l:right)
        return b.build()
    endfunction
    let g:Popc_useStatusline=1
    let g:Popc_statusLine='StatusLine()'
<

                                                                      |popc-toc|

--------------------------------------------------------------------------------
 2.4 Tabline                                                      *popc-tabline*

Set your own tabline with `g:Popc_tabLine` and `g:Popc_useTabline`.
`popc#layer#buf#GetTabs()` and `popc#layer#buf#GetBufs()` can get buffer and
tabpages context from buffer layer.

Attention: the tabline of popc is used for buffer layer. So if `useTabLine` is
enabled, `useLayer.Buffer` will be enabled automatically.

Switch your tabline layout with `popc#stl#TabLineSetLayout()`:
>
    function! PopcTablineToggleLayout(lyt)
        if a:lyt == 0
            call popc#stl#TabLineSetLayout('buffer', 'tab')
        elseif a:lyt == 1
            call popc#stl#TabLineSetLayout('tab', 'buffer')
        elseif a:lyt == 2
            call popc#stl#TabLineSetLayout('buffer', '')
        elseif a:lyt == 3
            call popc#stl#TabLineSetLayout('', 'tab')
        endif
    endfunction
<

                                                                      |popc-toc|

--------------------------------------------------------------------------------
 2.5 Highlight                                                  *popc-highlight*

Customize highlight with `g:Popc_highlight` and `popc#stl#InitHighLight()`:
>
    let g:hi = {
        \ 'text'        : 'Pmenu',
        \ 'selected'    : 'PmenuSel',
        \ 'lineTxt'     : 'Pmenu',
        \ 'lineSel'     : 'PmenuSel',
        \ 'modifiedTxt' : '',
        \ 'modifiedSel' : 'DiffAdd',
        \ 'labelTxt'    : 'IncSearch',
        \ 'blankTxt'    : 'Normal',
        \ }
    call popc#stl#InitHighLight(g:hi)
<
`g:hi` is a dictionary to save highlight name. `g:hi.text` and `g:hi.selected`
are required for `g:hi` at least.

                                                                      |popc-toc|

================================================================================
3. Layer                                                            *popc-layer*

--------------------------------------------------------------------------------
 3.1 Buffer layer                                                  *popc-buffer*

`Buffer layer` will track all buffers and tabpages automatically, and displays
buffers scooped under tabpages at the tabline.
In buffer layer you can switch buffers and tabpaes easily.

An example mapping to open buffer layer:
>
    nnoremap <leader><leader>h :PopcBuffer<CR>
<
Example mappings to switch buffers and tabpages, which is very convenient with
tabline.
>
    nnoremap <M-i> :PopcBufferSwitchTabLeft<CR>  " switch to left tab
    nnoremap <M-o> :PopcBufferSwitchTabRight<CR> " switch to right tab
    nnoremap <M-u> :PopcBufferSwitchLeft<CR>     " switch to left buffer
    nnoremap <M-p> :PopcBufferSwitchRight<CR>    " switch to right buffer
    nnoremap <C-u> :PopcBufferJumpPrev<CR>       " jump to prev buffer location
    nnoremap <C-p> :PopcBufferJumpNext<CR>       " jump to next buffer location
    cnoremap q<CR> :PopcBufferClose<CR>          " close current buffer NOT keep window when buffer number > 1 of current tab
    cnoremap Q<CR> :PopcBufferClose!<CR>         " close current buffer but keep window
<
An example to search all buffer contents with LeaderF:
>
    " a:type = 'sigtab' search text in buffers of current tab
    " a:type = 'alltab' search text in buffers of all tab
    function! PopcBufSearch(pat, type)
        let l:files = popc#layer#buf#GetFiles(a:type)
        if !empty(l:files)
            execute ':Leaderf rg -e ' a:pat . ' ' . join(l:files, ' ')
        endif
    endfunction
    " search context in buffers with fuzzy
    nnoremap <leader>bc :call PopcBufSearch('""', 'sigtab')<CR>
    nnoremap <leader>bC :call PopcBufSearch('""', 'alltab')<CR>
    " search context string from input
    :call PopcBufSearch(<string-to-search>, 'sigtab')
    :call PopcBufSearch(<string-to-search>, 'alltab')
<
In buffer layer, press '?' to see all operations:
>
    h,a,l       | Pop buffers layer (h-Tab buffers, a-All buffers, l-Tab list)
    CR,Space    | Load buffers (Space to stay in popc)
    s,S,v,V,t,T | Split or tab buffers (SVT to stay in popc)
    p           | Show/hide full path of buffers
    g,G         | Goto window contain the current buffer(G to stay in popc)
    c,C         | Close one buffer (C-Close tab's all buffer)
    i,o         | Switch to left/right(i/o) tab
    I,O         | Move buffer to left/right(I/O) tab
    n           | Set current tab name
    e           | Edit a new file
<

                                                                      |popc-toc|

--------------------------------------------------------------------------------
 3.2 Bookmark layer                                              *popc-bookmark*

`Bookmark layer` is a convenient manager for bookmark files. All bookmark layer
data is saved to `<jsonPath>/.popc.json`.

An Example mapping to open bookmark layer:
>
    nnoremap <leader><leader>b :PopcBookmark<CR>
<
An example to search contexts of all bookmarked files with LeaderF:
>
    function! PopcBmsSearch(pat)
        let l:files = popc#layer#bms#GetBmsFiles()
        if !empty(l:files)
            execute ':Leaderf rg -e ' a:pat . ' ' . join(l:files, ' ')
        endif
    endfunction
    nnoremap <leader>bs :call PopcBmsSearch()<CR>
<
In bookmark layer, press '?' to see all operations:
>
    b                    | Pop bookmarks layer
    CR,Space,s,S,v,V,t,T | Load bookmark (CR-Open, Space-Stay, sSvV-Split, tT-Tab)
    a                    | Add file as bookmark
    d                    | Delete one bookmark
    g                    | Display sorted bookmaks
<

                                                                      |popc-toc|

--------------------------------------------------------------------------------
 3.3 Workspace layer                                            *popc-workspace*

`Workspace layer` is mainly for saving/loading specified vim session along with
user's settings required for workspace and layout of `buffer layer`.
All workspace data is saved to `<jsonPath>/.popc.json`.
If `wksSaveUnderRoot = 0`, workspace session files are stored under `<jsonPath>/.popc/`.
If `wksSaveUnderRoot = 1`, workspace session files are stored under `<WorkspaceRoot>/.popc/`.

An example mapping to open workspace layer:
>
    nnoremap <leader><leader>w :PopcWorkspace<CR>
<
An example to search files or contexts of workspace with LeaderF:
>
    function! PopcWksSearchFile()
        let l:wks_root = popc#layer#wks#GetCurrentWks('root')
        if !empty(l:wks_root)
            execute ':LeaderfFile ' . l:wks_root
        endif
    endfunction
    function! PopcWksSearchContext()
        let l:wks_root = popc#layer#wks#GetCurrentWks('root')
        if !empty(l:wks_root)
            execute ':Leaderf rg -e "" ' . l:wks_root
        endif
    endfunction
    nnoremap <leader>wf :call PopcWksSearchFile()<CR>
    nnoremap <leader>wc :call PopcWksSearchContext()<CR>
<
An example to save and load specified workspace settings in `dict` format:
>
    let g:ws = {'settings': {'key': 'test'}}
    autocmd User PopcLayerWksSavePre call popc#layer#wks#SetSettings(g:ws.settings)
    autocmd User PopcLayerWksLoaded let g:ws.settings = popc#layer#wks#GetSettings()
<
In workspace layer, press '?' to see all operations:
>
    w            | Pop workspace layer
    CR,Space,t,T | Load workspace (CR-Open, Space-Stay, tT-Tab)
    a            | Add new workspace
    s,S          | Save the workspace (S-Save in force)
    d            | Delete the workspace
    C            | Close current workspace
    n            | Set name of workspace
    r            | Set root of workspace
    g            | Display sorted workspaces
<

                                                                      |popc-toc|

--------------------------------------------------------------------------------
 3.4 Common mappings for layers                                         *popc-common*

There are common mappings to switch from layer to another layer:
>
    h   | Goto buffers layer
    b   | Goto bookmarks layer
    w   | Goto workspace layer
<
                                                                      |popc-toc|

================================================================================
4. Add customized layer                                         *popc-add-layer*

All you need to do is implementing one `layer` struct and add to `s:popc`. The
file `autoload/popc/layer/exp.vim` can be a good example layer to start.

                                                                      |popc-toc|

================================================================================
5. License                                                        *popc-license*

MIT License

Copyright (c) 2019 yehuohan

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
