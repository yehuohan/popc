*popc.txt* Popc manager for vim.
*popc*


                        _/_/_/
                       _/    _/    _/_/    _/_/_/       _/_/
                      _/_/_/    _/    _/  _/    _/   _/    _/
                     _/        _/    _/  _/    _/   _/
                    _/          _/_/    _/_/_/       _/_/_/
                                       _/
                                      _/


================================================================================
Table of Contents                                                     *popc-toc*

1. Overview                                                      |popc-overview|
2. Usage                                                            |popc-usage|
 2.1 Installation                                            |popc-installation|
 2.2 Configuration                                          |popc-configuration|
 2.3 Statusline                                                |popc-statusline|
 2.4 Tabline                                                      |popc-tabline|
 2.5 Highlight                                                  |popc-highlight|
3. Layer                                                            |popc-layer|
 3.1 Buffer layer                                                  |popc-buffer|
 3.2 Bookmark layer                                              |popc-bookmark|
 3.3 Workspace layer                                            |popc-workspace|
 3.4 Common maps for layer                                         |popc-common|
4. Add customized layer                                         |popc-add-layer|
5. License                                                        |popc-license|


================================================================================
1. Overview                                                      *popc-overview*

Popc in layer manager, including layer buffer, bookmark.....

                                                                      |popc-toc|

================================================================================
2. Usage                                                            *popc-usage*

--------------------------------------------------------------------------------
 2.1 Installation                                            *popc-installation*

Example for vim-plug:
>
    Plug 'yehuohan/popc'
<
You should meet the requirements below:
>
    vim8.0 or higher
    enable hidden option
<

                                                                      |popc-toc|

--------------------------------------------------------------------------------
 2.2 Configuration                                          *popc-configuration*

There some options start with `g:Popc_` used to config popc. The default value
is below:

>

    let s:conf = {
        \ 'jsonPath'       : $HOME,
        \ 'useFloatingWin' : 0,
        \ 'symbols'        : {},
        \ 'useUnicode'     : 1,
        \ 'highlight'      : {
            \ 'text'        : 'Pmenu',
            \ 'selected'    : 'PmenuSel',
            \ 'lineTxt'     : 'Pmenu',
            \ 'lineSel'     : 'PmenuSel',
            \ 'modifiedTxt' : '',
            \ 'modifiedSel' : 'DiffAdd',
            \ 'labelTxt'    : 'IncSearch',
            \ 'blankTxt'    : 'Normal',
            \ },
        \ 'useTabline'     : 1,
        \ 'useStatusline'  : 1,
        \ 'usePowerFont'   : 0,
        \ 'selectPointer'  : '',
        \ 'separator'      : {'left' : '', 'right': ''},
        \ 'subSeparator'   : {'left' : '', 'right': ''},
        \ 'statusLine'     : 'popc#stl#StatusLine()',
        \ 'tabLine'        : 'popc#stl#TabLine()',
        \ 'tabLineLayout'  : {'left' : 'buffer', 'right': 'tab'},
        \ 'maxHeight'      : 0,
        \ 'useLayer'       : {'Buffer': 1, 'Bookmark': 1, 'Workspace': 1},
        \ 'useLayerRoots'  : ['.popc', '.git', '.svn', '.hg'],
        \ 'useLayerPath'   : 0,
        \ 'operationMaps'  : {
            \ 'moveCursorDown'   : ['j', 'C-j'],
            \ 'moveCursorUp'     : ['k', 'C-k'],
            \ 'moveCursorBottom' : ['J'],
            \ 'moveCursorTop'    : ['K'],
            \ 'moveCursorPgDown' : ['M-j'],
            \ 'moveCursorPgUp'   : ['M-k'],
            \ 'help'             : ['?'],
            \ 'back'             : ['q'],
            \ 'quit'             : ['Esc']
            \ },
        \ 'enableLog' : 0
        \ }
<
default symbols:
>

    let s:defaultSymbols = {
        \ 'unicode' : {
            \ 'Popc'   : '❖',
            \ 'Buf'    : '⌂',
            \ 'Wks'    : '♥',
            \ 'Bms'    : '★',
            \ 'CTab'   : '●',
            \ 'Tab'    : '○',
            \ 'WIn'    : '▪',
            \ 'WOut'   : '▫',
            \ 'Rank'   : '≡',
            \ 'Arr'    : '→',
            \ 'Dots'   : '…',
            \ 'Ptr'    : '►',
            \ 'Nums'   : ['⁰', '¹', '²', '³', '⁴', '⁵', '⁶', '⁷', '⁸', '⁹']
            \ },
        \ 'ascii' : {
            \ 'Popc'   : '#',
            \ 'Buf'    : '@',
            \ 'Wks'    : '&',
            \ 'Bms'    : '$',
            \ 'Tab'    : '~',
            \ 'CTab'   : '%',
            \ 'WIn'    : '*',
            \ 'WOut'   : '-',
            \ 'Rank'   : '=',
            \ 'Arr'    : '->',
            \ 'Dots'   : '...',
            \ 'Ptr'    : '>',
            \ 'Nums'   : ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'],
            \ },
        \ }
<

                                                                      |popc-toc|

--------------------------------------------------------------------------------
 2.3 Statusline                                                *popc-statusline*

Set your own statusline by provide a function to `g:Popc_statusLine`, and set
`g:Popc_useStatusline` to 1 which means use the statusline for popc. Function
`popc#stl#StatusLineGetSegments()` can get the content for statusline.

An example with airline:
>
    function! StatusLine()
        let [l:left, l:center, l:right] = popc#stl#StatusLineGetSegments('a')
        let b = airline#builder#new({ 'active': 1 })
        call b.add_section('airline_a', l:left)
        call b.add_section('airline_b', '')
        call b.add_section('airline_c', l:center)
        call b.split()
        call b.add_section('airline_y', '')
        call b.add_section('airline_z', l:right)
        return b.build()
    endfunction
    let g:Popc_statusLine='StatusLine()'
<

                                                                      |popc-toc|

--------------------------------------------------------------------------------
 2.4 Tabline                                                      *popc-tabline*

Set your own tabline by provide a function to `g:Popc_tabLine`, and set
`g:Popc_useTabline` to 1 which means use the tabline for popc. Function
`popc#layer#buf#GetTabs()` and `popc#layer#buf#GetBufs()` can get the
information of tabs and buffers of each tab for tabline.

Attention: the tabline of popc is used for buffer layer. So if `useTabLine` is
set to 1, `useLayer.Buffer` will be set to 1 automatically.

Set your own tabline layout with `popc#stl#TabLineSetLayout()`:

>
    function! PopcTablineToggleLayout(lyt)
        if a:lyt == 0
            call popc#stl#TabLineSetLayout('buffer', 'tab')
        elseif a:lyt == 1
            call popc#stl#TabLineSetLayout('tab', 'buffer')
        elseif a:lyt == 2
            call popc#stl#TabLineSetLayout('buffer', '')
        elseif a:lyt == 3
            call popc#stl#TabLineSetLayout('', 'tab')
        endif
    endfunction
<

                                                                      |popc-toc|

--------------------------------------------------------------------------------
 2.5 Highlight                                                  *popc-highlight*

Customize highlight use `g:Popc_highlight` or `popc#stl#InitHighLight()`:
>
    let g:hi = {
        \ 'text'        : 'Pmenu',
        \ 'selected'    : 'PmenuSel',
        \ 'lineTxt'     : 'Pmenu',
        \ 'lineSel'     : 'PmenuSel',
        \ 'modifiedTxt' : '',
        \ 'modifiedSel' : 'DiffAdd',
        \ 'labelTxt'    : 'IncSearch',
        \ 'blankTxt'    : 'Normal',
        \ }
    call popc#stl#InitHighLight(g:hi)
<
`g:hi` is a dictionary to save highlight name, and `g:hi.text` and
`g:hi.selected` is necessary at least.

                                                                      |popc-toc|

================================================================================
3. Layer                                                            *popc-layer*

--------------------------------------------------------------------------------
 3.1 Buffer layer                                                  *popc-buffer*

Buffer layer is used to manager all tab and buffers of each tab. In buffer layer
you can switch to one tab or buffer easily.

Use the following example maps to open buffer layer:
>
    nnoremap <leader><leader>h :PopcBuffer<CR>
<
And use the following example maps for switching tabs and buffers, which can be
very convenient with tabline.
>
    nnoremap <M-i> gT                           " switch to left tab
    nnoremap <M-o> gt                           " switch to right tab
    nnoremap <M-u> :PopcBufferSwitchLeft<CR>    " switch to left buffer
    nnoremap <M-p> :PopcBufferSwitchRight<CR>   " switch to right buffer
    nnoremap <C-u> :PopcBufferJumpPrev<CR>      " jump to prev buffer location
    nnoremap <C-p> :PopcBufferJumpNext<CR>      " jump to next buffer location
    cnoremap q<CR> :PopcBufferClose<CR>         " close current buffer NOT keep window when buffer number > 1 of current tab
    cnoremap Q<CR> :PopcBufferClose!<CR>        " close current buffer but keep window
<
Search context in buffers with LeaderF(or fzf if you want):
>
    " a:type = 'sigtab' search text in buffers of current tab
    " a:type = 'alltab' search text in buffers of all tab
    function! PopcBufSearch(pat, type)
        let l:files = popc#layer#buf#GetFiles(a:type)
        if !empty(l:files)
            execute ':Leaderf rg -e ' a:pat . ' ' . join(l:files, ' ')
        endif
    endfunction
    " search context in buffers with fuzzy
    nnoremap <leader>bc :call PopcBufSearch('""', 'sigtab')<CR>
    nnoremap <leader>bC :call PopcBufSearch('""', 'alltab')<CR>
    " search context string from input
    :call PopcBufSearch(<string-to-search>, 'sigtab')
    :call PopcBufSearch(<string-to-search>, 'alltab')
<
In buffer layer, press '?' to see all command help:
>
    h,a,l       | Pop buffers layer (h-Tab buffers, a-All buffers, l-Tab list)
    CR,Space    | Load buffers (Space to stay in popc)
    s,S,v,V,t,T | Split or tab buffers (SVT to stay in popc)
    g,G         | Goto window contain the current buffer(G to stay in popc)
    c,C         | Close one buffer (C-Close tab's all buffer)
    i,o         | Switch to left/right(i/o) tab
    I,O         | Move buffer to left/right(I/O) tab
    n           | Set current tab name
    e           | Edit a new file
    ?           | Show help of buffers layer
<

                                                                      |popc-toc|

--------------------------------------------------------------------------------
 3.2 Bookmark layer                                              *popc-bookmark*

Bookmark layer is used to manager all bookmark file. All bookmark data is saved
in `<jsonPath>/.popc.json`.

Use the following example maps to open buffer layer:
>
    nnoremap <leader><leader>b :PopcBookmark<CR>
<
Search file or context in bookmarked files with LeaderF(or fzf if you want):
>
    function! PopcBmsSearch(pat)
        let l:files = popc#layer#bms#GetBmsFiles()
        if !empty(l:files)
            execute ':Leaderf rg -e ' a:pat . ' ' . join(l:files, ' ')
        endif
    endfunction
    nnoremap <leader>bs :call PopcBmsSearch()<CR>
<
In bookmark layer, press '?' to see all command help:
>
    b                    | Pop bookmarks layer
    CR,Space,s,S,v,V,t,T | Load bookmark (CR-Open, Space-Stay, sSvV-Split, tT-Tab)
    a                    | Add file as bookmark
    d                    | Delete one bookmark
    g                    | Display sorted bookmaks
    ?                    | Show help of bookmarks layer
<

                                                                      |popc-toc|

--------------------------------------------------------------------------------
 3.3 Workspace layer                                            *popc-workspace*

Workspace layer is used to manager all working session. All workspace data is
saved in `<jsonPath>/.popc.json`. Workspace session file is stored in
`<jsonPath>/.popc/` if `useLayerPath` is 0, or `<WorkspaceRoot>/.popc/` if
`useLayerPath` is 1.

Use the following example maps to open buffer layer:
>
    nnoremap <leader><leader>w :PopcWorkspace<CR>
<
Search file or context in workspace with LeaderF(or fzf if you want):
>
    function! PopcWksSearchFile()
        let l:wks_root = popc#layer#wks#GetCurrentWks('root')
        if !empty(l:wks_root)
            execute ':LeaderfFile ' . l:wks_root
        endif
    endfunction
    function! PopcWksSearchContext()
        let l:wks_root = popc#layer#wks#GetCurrentWks('root')
        if !empty(l:wks_root)
            execute ':Leaderf rg -e "" ' . l:wks_root
        endif
    endfunction
    nnoremap <leader>wf :call PopcWksSearchFile()<CR>
    nnoremap <leader>wc :call PopcWksSearchContext()<CR>
<
You can save and load your own settings in dict type with autocmd:
>
    let g:ws = {'settings': {'key': 'test'}}
    autocmd User PopcLayerWksSavePre call popc#layer#wks#SetSettings(g:ws.settings)
    autocmd User PopcLayerWksLoaded let g:ws.settings = popc#layer#wks#GetSettings()
<
In workspace layer, press '?' to see all command help:
>
    w            | Pop workspace layer
    CR,Space,t,T | Load workspace (CR-Open, Space-Stay, tT-Tab)
    a            | Add new workspace
    s,S          | Save the workspace (S-Save in force)
    d            | Delete the workspace
    C            | Close current workspace
    n            | Set name of workspace
    r            | Set root of workspace
    g            | Display sorted workspaces
    ?            | Show help of workspaces layer
<

                                                                      |popc-toc|

--------------------------------------------------------------------------------
 3.4 Common maps for layer                                         *popc-common*

There are common key-maps to switch from layer to another layer:
>
    h   | Goto buffers layer
    b   | Goto bookmarks layer
    w   | Goto workspace layer
<
                                                                      |popc-toc|

================================================================================
4. Add customized layer                                         *popc-add-layer*

All you need to do is implement one layer struct and add to s:popc. The file
`autoload/popc/layer/exp.vim` can be a good example layer to start.

                                                                      |popc-toc|

================================================================================
5. License                                                        *popc-license*

MIT License

Copyright (c) 2019 lrx

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
